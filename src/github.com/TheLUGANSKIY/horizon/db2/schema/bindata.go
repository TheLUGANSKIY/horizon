// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x73\xe2\x38\x12\xfe\x9e\x5f\xa1\xda\x2f\x24\x55\x90\xca\xcb\x6c\x26\x21\x95\xad\x62\x12\xef\x0d\x75\x8c\xd9\x01\x73\xb3\x53\x5b\x5b\x2a\x61\x37\xa0\x1b\x5b\xf2\x48\x72\x06\xf6\xea\xfe\xfb\x95\xdf\xc0\x18\xcb\x2f\xe0\xec\x7d\x04\xb5\xbb\x9f\xa7\xbb\xd5\xea\x96\xdd\xeb\x9d\xf5\x7a\xe8\x37\x2e\xd5\x52\xc0\xf4\xf3\x08\x39\x44\x91\x39\x91\x80\x9c\xc0\xf3\xcf\x7a\xbd\xb3\x70\xfd\x25\xf0\x7c\x70\xd0\x42\x70\x6f\x27\xf0\x0a\x42\x52\xce\xd0\xc3\xe5\xdd\xe5\x75\x46\x6a\xbe\x41\xfe\x12\x87\x8f\xef\x89\xdc\x9c\x9d\x4d\x0d\x0b\x49\x45\x14\x78\xc0\x14\x56\xd4\x03\x1e\x28\xf4\x84\xae\x1e\xa3\x25\x97\xdb\xdf\x0e\xff\xb5\x5d\x1a\x4a\x03\xb3\xb9\x43\xd9\x12\x3d\xa1\xce\xcc\xfa\xf5\xbe\xf3\x98\xaa\x63\x0e\x11\x0e\xb6\x39\x5b\x70\xe1\x51\xb6\xc4\x52\x09\xca\x96\x12\x3d\x21\xce\x12\x1d\x2b\xb0\xbf\xe1\x45\xc0\x6c\x45\x39\xc3\x73\xee\x50\x08\xd7\x17\xc4\x95\xb0\x67\xc6\xa3\x0c\x7b\x20\x25\x59\x46\x02\x3f\x88\x60\x94\x2d\x1f\x13\xec\x40\x84\xbd\xc2\x3e\x51\x2b\xf4\x84\xfc\x60\xee\x52\xbb\x1b\x92\xb5\x89\x22\x2e\x4f\xc5\x1c\x58\x90\xc0\x55\x58\x91\xb9\x0b\xd2\x27\x36\x84\xa0\x3b\xb9\xd5\x1f\x54\xad\x30\xa7\x4e\x06\xc7\x59\x1c\x0d\x93\x78\xd0\x47\x4b\x2e\x7c\xec\xd1\xa5\x20\x21\x66\xf9\x88\xac\x8d\x0f\x7d\x64\x0d\x3e\x8c\x8c\x47\x34\xb5\x57\xe0\x91\x7e\x02\xe2\x11\x8d\x7f\x30\x10\x7d\xd4\x8b\x22\xf6\x3c\x31\x06\x96\x11\x8b\xe6\xf5\xa0\xf3\x33\x84\x10\xa2\x0e\x52\xb0\x56\xc8\x1c\x5b\xc8\x9c\x8d\x46\xdd\xe8\x5f\xe2\xfb\x2e\x05\x07\x13\x85\xc2\x38\x48\x45\x3c\x1f\x85\x40\xa3\x9f\xe8\x2f\xce\xe0\xec\xe2\xf1\x6c\x1f\xe8\x8a\x4a\xc5\xc5\x06\x13\xdb\xe6\x01\x53\x12\x53\x07\x4b\xf8\x9e\x02\x9e\x1a\x9f\x67\x86\xf9\x5c\x13\x73\x2a\xad\xd3\x1a\xc1\x9c\x5a\x83\x89\x85\xbe\x0c\xad\x8f\xe8\x3a\xfa\x63\x68\x3e\x4f\x8c\x4f\x86\x69\xa1\x0f\x5f\x93\xbf\xcc\x31\xfa\x34\x34\xff\x35\x18\xcd\x8c\xed\xef\xc1\xef\xbb\xdf\xcf\x83\xe7\x8f\x06\xba\xae\x22\x73\xb4\xdb\xf3\x8a\x76\x7e\x9f\xd3\x25\x65\x0a\xbd\x18\xbf\x0e\x66\x23\x0b\x31\x58\xab\x57\xe2\x9e\x77\x34\x8c\x3b\xfd\xbe\x80\xa5\xed\x12\x29\x2f\xf2\xe1\x72\x1c\x01\x52\x22\x7b\x45\x04\xb1\x15\x08\xf4\x4a\xc4\x86\xb2\xe5\xf9\xdd\xbb\x0b\x7d\xa0\x60\xb1\x00\xbb\x05\x6a\x89\x9e\x84\x59\x0e\x3e\xde\x31\xdd\x07\x9d\xca\x71\x1f\xe2\x94\xd4\x4a\xfe\xc4\x85\x03\xe2\x27\x44\x99\x82\x25\x88\xdc\xaa\xda\xf8\xa0\x59\x72\x40\x11\xea\x4a\xf4\x6f\xc9\xd9\x5c\xef\x07\x17\x9c\x25\x88\xd3\xfd\x90\xe8\x49\xfc\x20\xe1\x7b\x00\xcc\xd6\x61\x8b\x85\xf1\x8a\xc8\x55\x71\xdc\x72\xf2\xbe\x80\x57\xca\x03\x89\x2b\x1f\x4c\xdc\x22\x08\x93\x24\xae\x73\x51\x20\xb6\x38\xd2\x84\xbb\xca\x59\xd8\x05\xa2\x9e\xbc\xed\x72\x59\x54\x23\xc2\xaa\xbd\x2d\x13\xf9\x67\x04\x10\x55\xf9\x50\x2c\x1b\xf8\x4e\x6d\xd9\x6d\xea\x24\x3f\x3d\x9f\x0b\x05\x02\xa7\x07\x4f\x9e\xcb\x75\x3e\x89\xb8\x22\x2e\xb6\x39\x65\xb2\x38\x07\x17\x00\xd8\xe7\xdc\x2d\x5e\x0d\xcf\x41\xbc\x00\x5d\xac\xa3\x65\x01\x12\xc4\xab\x4e\xc4\x23\x6b\xac\xd6\x58\x82\xc2\x92\xfe\xa5\x93\xf2\x05\x57\xdc\xe6\xae\x96\xd7\x2e\x46\xfa\x74\xdf\xc5\xd9\x27\x42\x51\x9b\xfa\xa4\x8d\x02\x57\xac\x76\x57\xee\x8a\x19\xd5\xaf\x02\xd5\x75\xa5\x29\xe5\x76\x0f\xa8\x52\x1b\x7f\xd7\x71\xd5\x88\x28\x1a\x7f\x31\x8d\x17\xf4\xe1\x6b\x05\xe3\xc1\xc8\x32\x26\x0d\x09\x6f\x75\x57\x88\x5f\x52\xa7\x92\x4b\x8b\xb9\x79\x78\xfc\xe6\xea\x40\xa6\x6a\xea\x64\xa2\xe6\xc8\x8e\xa9\x44\x27\xd3\x89\x07\x53\xfc\x97\xe4\x81\xb0\x21\xcd\x6e\xcd\x91\x90\x6e\xf3\x4e\xa7\xdf\x3f\x90\xa8\xb1\x0f\xb2\xf4\x5a\xdd\xfc\x3a\xc5\x75\xb7\x7f\x1d\xbf\x9f\x52\x00\x74\xf8\xda\x2d\x01\x15\x56\xfe\xae\x22\xd0\x90\xec\x89\x65\xa0\xc2\xda\x61\x21\xd0\x3d\x50\x52\x0a\x32\x8f\xb4\x9a\xab\x69\x7e\x66\x21\xd5\xee\xc8\x92\x46\xac\xa2\xcf\xab\x5b\x2d\xca\x37\x7e\xa1\xec\xce\xb4\xbe\x65\x21\xda\xad\xa7\x6b\xf7\xfe\x2f\x0d\x9b\x5a\x63\x60\xaf\xe0\x72\x1f\x8a\xe6\x51\xb5\x0e\xdb\xa7\xc0\x55\x9a\x45\x0f\x14\xd1\x2c\x85\x5e\xd0\x2d\x4b\xba\x64\x44\x05\x02\x8a\x46\xa7\x87\xbb\x8b\x3f\xfe\xdc\x55\xdc\xff\xfc\xb7\xa8\xe6\xfe\xf1\x67\xbe\x8f\x03\x8f\xe3\xa8\xf2\x1f\xd6\xe7\xad\x2e\xc6\x19\x94\x56\xf0\x9d\xae\x43\x35\x09\x33\xea\x01\x9e\xf3\x80\x39\x32\x8c\xdc\xbd\x20\x6c\x59\x32\x93\x6b\x9a\x33\xea\xa4\xbb\x29\xc1\x56\xab\x04\xc4\xdb\x69\x6c\x8e\xaa\x0e\x77\x14\xcb\x3f\x8f\x47\xb3\x4f\x66\x18\xf2\xa9\x61\xe9\xe7\xdd\xd2\x7e\x22\x3b\xfd\x36\xad\x7b\xed\xd1\xd4\x5a\x68\x44\xb4\xa2\x62\x16\x53\x7d\x21\x8a\xa0\x05\x17\x35\x6e\x85\xd0\xcb\xc0\x1a\x54\x50\x1c\x9a\x53\x63\x62\xa1\xa1\x69\x8d\x0f\x6e\x86\xa2\x83\x66\x8a\xce\x3b\xd7\x98\x32\xaa\x28\x71\xb1\x8c\x74\x5d\xca\xef\x6e\xa7\x8b\x3a\x37\x57\xd7\xef\x7b\x57\xb7\xbd\x9b\x2b\x74\x7d\xdb\x7f\xf7\xbe\xff\xee\xfe\xf2\xe1\xee\xee\xf6\xe1\xe7\xde\xd5\xcf\x9d\x8b\xc7\x7a\xda\x6f\x30\x65\x0e\xac\xf7\x5d\x30\xdf\x60\xc5\xa9\x53\x6e\xe9\xe1\xfe\xe1\x7d\x13\x4b\xb7\x38\x90\xb0\xad\x96\x98\x32\x9c\xbf\x63\x29\xb5\xf7\xfe\xe6\xe6\xee\xa6\x89\xbd\x77\x98\x38\x0e\xce\x0f\x6b\xe5\x36\xee\xef\xef\x6f\x13\x1b\x9a\x90\x97\x5e\x49\xd5\x89\xf9\x51\xd7\x75\x61\x2a\x57\xe8\x9d\x1a\x23\xe3\xd9\xca\xdc\x7f\x5e\x4a\x28\xbf\xca\xea\xa2\xeb\x6e\x7c\xd9\x59\x4d\xb7\xe8\x96\xaa\x09\x5b\x8d\xda\xa2\x4b\x9f\x16\xd4\xd6\x18\xae\x8f\x0f\x55\xb3\xe9\xae\x8d\xc0\x95\xd7\xe4\x26\x61\xd4\x4c\x73\x2d\xb8\xbc\xd6\x50\x73\xbc\xd3\x9b\x76\xd3\x6d\xb8\xbd\xea\x84\x68\xe2\x78\x6d\xef\xdc\xdc\x25\xf9\x82\x97\xfb\x8d\xfd\x6f\xb0\x49\x4d\x3c\x8f\xcd\xa9\x35\x19\x0c\xcd\xc6\x87\x6d\x4e\x6b\xd4\xee\x0c\x5e\x5e\x32\x1a\x0b\x0d\xa3\xdf\x26\xc3\x4f\x83\xc9\x57\xf4\x4f\xe3\x2b\x3a\xa7\x4e\xd3\x5e\xa8\x22\xe5\xdb\xe1\x56\x6e\xa4\x88\x6a\x0d\x58\xb5\x99\x6b\xdb\x97\xca\xbc\x6b\x97\xbd\xce\x4c\x19\xff\x52\x68\x95\x1e\x98\x6f\xcf\xa0\x94\xc5\xd0\x7c\x31\x7e\xaf\x37\x3e\x46\xa2\x19\x15\x68\x6c\x16\x0f\x93\xb3\xe9\xd0\xfc\x07\x9a\x2b\x01\x80\xce\x13\xe1\xee\xc1\xb4\x56\x04\x2e\x1c\x3a\x4f\x41\x16\x0d\xad\xb5\x60\xe5\x47\xdd\x22\x34\xf1\xd9\x78\x0a\x9e\x58\x43\x3d\x44\xb9\x39\xba\x7b\x38\x32\x17\x26\x34\x86\xb0\x59\x8c\xd6\x8f\x40\x3a\x33\x87\x9f\x67\x29\xe0\x9c\xba\x2c\xec\xf4\xdd\xd6\x1e\xe2\xa2\x4b\xeb\x6e\xfa\x9a\x4a\x07\x76\x37\x84\x9c\x08\x93\x3a\xb5\x01\xee\xae\xca\xba\x85\x37\xed\x15\xa0\xb9\x8f\xfd\xb6\x70\x27\xba\xb2\xd0\x35\x85\xf8\x28\x26\xc5\x04\xd4\xba\x3d\x02\x89\x2e\x4d\x4e\x1f\x49\x61\xff\xde\xf3\x90\x04\xf7\xc3\xac\x5c\xf1\xa3\x38\x24\xe0\x77\x3a\x8e\x75\x7e\xb9\xa3\xb7\xaf\x24\xe7\x9b\x36\x7c\xbd\xaf\x2e\x0b\x39\x7d\xbf\xba\x87\xb1\x18\x51\xd6\xaf\x6d\xc1\x3a\xd0\x59\xaf\xbc\x15\x01\x54\x71\x48\xd4\x29\x61\xdd\xe9\x38\x3e\x25\x2b\xd2\x2f\x9e\xcf\x0f\x86\x38\xce\x70\xf2\xc5\xc1\xa9\x5e\xad\x34\x90\xa5\xb6\xfd\x82\x62\xff\x98\x8d\x05\x1b\x60\x3f\x3d\x19\xca\x74\x57\x23\xae\x74\x74\x52\xd2\x43\x7d\x6a\xe3\xc3\xd1\x29\x52\xaa\xb5\xf2\x0c\x09\x85\x2a\x80\x26\x1b\x32\x54\xb9\xfd\x18\xa0\x25\xb4\x45\xaa\x2b\x6b\xc1\x56\xb2\x3e\xee\xb6\x93\x61\x4f\xf5\x31\xc5\x4b\xaf\x2e\xf7\x4d\x43\xfb\x8e\x3e\xf8\x6a\xa2\x12\x7e\xee\x81\xfa\x64\x32\x1f\xb1\xbc\x99\xff\xb3\x1f\xca\x54\x31\xc9\xc8\xd6\x27\x51\xf4\x49\xce\x9b\xb1\x29\xfc\xfe\xa7\x8a\x56\xd1\x43\xf5\xf9\xa5\x1d\xf9\x9b\x71\xda\xbe\xbf\xaa\xe2\xa1\x1d\x9d\xf6\x55\xef\xee\x98\xde\x62\x6b\xe7\xb5\x17\x76\x53\x4d\x37\xf8\xbe\xd2\xfd\xf3\xb8\xa5\x1d\x5e\x66\xa2\x0e\x87\x46\x4d\x42\xce\x58\x7b\xc7\xd7\xa1\xe2\x5a\xd8\xab\x0f\xb1\x6c\xe7\xf6\x16\x69\x73\xa8\xff\xe8\xbe\x51\x09\xe2\xc0\xf6\x20\x4f\xc7\x55\x3c\xe7\xfc\xdb\xd1\x5e\x2e\xd1\x59\xd9\x22\x9c\x9f\xa7\x1f\xb2\xf4\x7e\xf9\x05\x75\x24\x77\x1d\x4c\xa4\x04\x15\xc5\xa7\xd3\xef\x2b\x58\xab\x8b\x8b\x2e\xd2\x0b\xda\xdc\xa9\x27\x48\xa5\x0c\x40\xe8\x45\xe7\x3c\x58\xae\x54\x2d\xf3\x7b\xa2\xe5\x00\xf6\x44\x73\x10\x2e\xd0\x97\x8f\xc6\xc4\x88\x93\x0c\x3d\xa1\xdb\xdb\x4c\xc0\x74\x5f\xd2\x23\x9b\x7b\xbe\x0b\x0a\xa2\x48\xfc\x2f\x00\x00\xff\xff\xed\x1f\xfd\xd2\x76\x2f\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 12150, mode: os.FileMode(420), modTime: time.Unix(1490035669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x5f\x6f\xdb\xc8\x11\x7f\xf7\xa7\x18\xdc\x8b\x6c\xd4\x6a\x2f\xb8\xe2\x70\x95\xe1\x03\x14\x99\x69\x84\xca\x54\x22\x51\x4d\x82\xc3\x61\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xdd\x0b\x52\x24\xc5\xff\xa4\x1c\xc9\xf7\x28\xee\xec\xcc\xfc\x66\x66\x7f\x33\x5c\x6a\x38\x84\xbf\xf8\xcc\x95\x54\x23\xac\x82\xab\xe1\xf0\x6a\x38\x84\x0f\x42\x69\x57\xe2\xf2\xe3\x0c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe5\xab\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x7b\xf8\xf1\x2e\x5e\xf2\x84\xfd\x54\x7d\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\xee\x61\xb0\xb2\xde\xfd\x32\xb8\x4b\xd5\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x3d\x08\x9e\xe8\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x5a\xdf\x50\x4f\x61\xc1\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x77\x57\x09\x3c\x93\xfa\x38\x82\xc0\x0b\x5c\xf5\xd5\xbb\x03\x6b\x1f\xe0\x08\x8c\xcf\x96\x61\x2e\xa7\x73\xf3\x0e\x96\xf6\x16\x7d\x3a\x82\xe1\x1d\xcc\xbf\x71\x94\x23\x18\xc6\xc8\x27\x0b\x63\x6c\x19\x47\x49\x98\xbe\x03\x73\x6e\x81\xf1\x79\xba\xb4\x96\xa9\x42\xf8\x34\xb5\xde\xc3\x72\xf2\xde\x78\x1c\x43\xe0\x12\x9b\x6a\xea\x89\xc8\x7a\xc1\xfc\x51\x4b\xc9\x91\xc9\xfc\xf1\xd1\x30\xad\x16\x37\x0e\x02\x30\x37\xab\x4a\x60\xba\x84\xc1\x87\xd9\xdf\x02\x37\x4a\x5e\x20\x85\x8d\x4e\x28\xa9\x07\x1e\xe5\x6e\x48\x5d\x1c\x94\xfd\xd8\x2a\x2d\x24\x9e\x2f\x0a\x07\x7d\xc5\x20\x84\x6b\x8f\xd9\xcd\x01\x28\xba\xf0\x32\xfc\x89\xd9\x08\x7e\x54\xb2\xa0\xf7\x01\xc2\x46\x48\x88\x9e\x47\x15\xa7\x50\x2b\x10\x1b\xb8\x7e\xc2\xfd\x2d\x3c\x53\x2f\xc4\x1b\x08\x28\x93\x2a\x0e\x49\x5c\x86\x48\xa5\xbd\x25\x01\xd5\x5b\xb8\x4f\xbc\xbe\x2d\xa6\x30\x12\x73\x70\x43\x43\x4f\x13\x4d\xd7\x1e\xaa\x80\xda\x18\x95\xf3\xa0\xb4\xfa\x8d\xe9\x2d\x11\xcc\xc9\x55\x68\x31\xee\x2c\xf2\x6c\x4f\xa8\x6d\x8b\x90\x6b\x95\xc2\xb7\xc6\x6f\x67\xc6\x11\x7c\x12\xbb\x2c\x02\x77\x60\x65\x66\x47\xf9\x7c\xc4\xfb\x2a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x66\x2e\xe3\x3a\xce\x94\xb9\x9a\xcd\x6e\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x96\x4a\x6a\x6b\x94\xf0\x4c\xe5\x9e\x71\xf7\xfa\xe7\xbf\xdf\x5c\xdd\x54\x6a\x25\xd1\x8e\x9b\x0d\xda\xe7\x76\x39\x51\x9a\x78\x5c\x02\x42\x9a\x10\xa4\x72\x22\x40\x49\x63\x5e\x68\x92\xfc\x41\x48\x07\xe5\x0f\xc0\xb8\x46\x17\x65\x69\x35\xae\x97\xfa\x25\x07\x35\x65\x9e\x82\xff\x28\xc1\xd7\xcd\x41\xf1\xd0\x71\x51\x9e\x39\x28\x89\xd2\x24\x28\x0a\xbf\x86\xc8\xed\x26\x47\x0f\xc2\x64\x4b\xd5\xb6\x3e\xa3\x25\xf9\x40\xe2\x33\x13\xa1\x22\x9d\x1b\x93\x18\x49\xca\x15\x3d\xb0\x6f\x9c\x95\xcc\x8f\x07\xe3\xdd\x78\x35\xb3\xe0\xc7\x92\x85\x63\x56\xfa\xc9\xdb\x9e\x50\xe8\x10\xaa\x21\xea\x20\x4a\x53\x3f\x80\xe8\x20\x45\xbd\x24\x7a\x02\x7f\x08\x8e\xe5\x3d\x12\xa9\xee\xdc\x74\x90\x0d\x03\xa7\xb7\x6c\x56\x47\xc9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\x82\xe5\x4d\xb9\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\xbe\x20\x37\x88\x24\x10\xc2\xab\x5f\x8d\x9a\x2e\xd9\x60\x53\xae\xe3\x65\x89\x0a\xe5\x73\x93\x88\x4f\x77\x44\xef\x88\x42\x4d\x14\xfb\xa3\x2a\xd5\x5c\xca\xc7\xb4\x05\x54\x6a\x66\xb3\x80\x9e\x9d\xa1\xea\x6d\x1c\xf9\xaa\x1e\x53\xff\xe3\xde\x4d\x20\xa7\xe2\x27\xcc\x21\x0a\xbf\xa6\x61\x58\x1a\x1f\x57\x86\x39\x69\x89\x44\x1e\x7c\x2a\xdd\xcf\x46\x8c\x60\x69\x8d\x17\xd6\xa1\x91\xbe\x89\x1f\x4c\xcd\xc9\xc2\x88\x5b\xdf\xdb\x2f\xc9\x23\x73\x0e\x8f\x53\xf3\xdf\xe3\xd9\xca\xc8\x7e\x8f\x3f\x1f\x7f\x4f\xc6\x93\xf7\x06\xbc\x39\x0b\x50\x98\x7f\x32\x8d\x07\x78\xfb\xa5\x03\xf1\x78\x66\x19\x8b\x13\x01\x67\xba\x3b\xc4\xff\xca\x9c\x4e\x2c\x97\x2a\xd4\xae\x66\x9a\xa7\xc7\xc6\x86\x1b\x04\x1e\xb3\x0f\xb8\xe2\x7e\xf4\x9d\xed\xe8\xf0\x48\x89\x50\xda\x98\x96\x7a\x03\xf7\xa7\x3c\x35\x18\x8c\x46\x15\x89\x1e\x87\x22\x0f\xef\x72\xb4\xd0\x64\x25\x8e\x7d\x03\x2d\xd4\xed\xad\x4f\xc0\xf7\x90\x42\x93\x67\xe7\xa5\x85\x0e\x2b\xaf\x45\x0c\x27\x82\xfd\x4e\x6a\xe8\xb0\x56\x25\x87\xa6\x0d\x2d\xf4\x90\xdb\x72\xb9\x92\x4d\x29\x22\xef\x5f\xef\x71\x2c\x99\xc2\x3a\x86\xbc\xbe\x0c\xd2\x4e\x06\xb5\xb2\x47\xd3\xcd\xf3\x0a\x6d\x6c\xcd\x4d\xb3\xde\x9f\x32\xad\xe9\x1d\x41\xfe\x8c\x9e\x08\x10\x34\xee\x2a\x54\xbd\x8b\x66\xa7\xd0\xd3\x0d\x8b\x3e\x46\xaf\x90\xb5\x4b\x51\x14\x9a\x96\x15\x73\x39\xd5\xa1\xc4\xba\x37\xaa\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\xea\x78\xf8\xb7\xdf\xcb\x43\x1c\xfa\x82\xc4\xdd\xa0\xca\xd9\x99\x2e\x2e\x38\xb6\xb2\xfa\x51\x57\x55\x4d\x82\x8c\xf9\x48\xd6\x22\xe4\x8e\x8a\x32\xf7\x8b\xa4\xdc\xc5\x98\x0c\xf3\x87\x89\x39\xe9\xd1\x49\x6c\xf7\x3a\xef\x87\xe3\x32\x37\x67\x5d\xdd\x1d\x0e\xf2\x93\xf9\x6c\xf5\x68\x46\x29\x8d\x5e\xa8\x53\x94\x1c\x77\xfa\x99\x7a\xd7\x83\x5e\x03\xc5\x60\x34\x92\xe8\xda\x1e\x55\xaa\xc2\xe8\x67\x43\xd1\xd8\xac\x4e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\x11\x3c\xe1\xfe\x78\xad\x62\x2e\xad\xc5\x78\x6a\xb6\xa0\xad\x12\xde\x89\x09\x8c\x4b\x69\xfc\xf0\x90\xb3\xd6\xc7\x47\xf8\xb0\x98\x3e\x8e\x17\x5f\xe0\x5f\xc6\x17\xb8\x66\xce\xe9\x3d\xf8\x82\x48\x9b\x6c\xb6\x61\x6d\xf5\xb3\x13\xed\x3a\x1b\x50\x52\x48\x53\xf3\xc1\xf8\xfc\x82\x46\x15\xef\xcb\xe9\x83\xb9\x59\xdf\xb6\x56\xcb\xa9\xf9\x4f\x58\x6b\x89\x08\xd7\x89\xf0\x6d\xa5\x2f\xd4\x79\x1a\xb5\xb7\xb3\xb9\x19\xf7\xca\x5e\x3e\x96\x3b\x6c\x9d\x6b\x87\x86\x7a\x36\xe7\x0e\xea\xfa\xb9\x57\xea\xe5\xb7\xd5\xb6\x5d\x5b\xe3\x04\xc9\x7a\x7f\x58\xff\x5e\xb7\x57\xe6\xf4\xe3\x2a\xf5\xbe\xa4\x3b\x8f\x21\xbd\x76\x2b\xb8\x5f\xf7\x9a\x7d\x9b\xde\xa0\x35\x79\x7e\xa4\xd5\x73\xfa\xcc\x9c\xde\xde\x1e\xa7\xfa\xdb\xda\x8b\x82\x0e\x04\x22\x20\xc1\x45\x40\x24\x8a\xf3\x38\x1a\xfa\xdf\x8b\x60\x55\xd1\x64\x37\x7a\xeb\xfd\xd9\x01\x15\x75\xe7\x31\xa5\x77\x95\x05\x10\xf5\xee\xe5\x4f\xef\x45\x7c\xac\x18\xe8\x77\x6c\x6b\xbc\x65\xdc\xc1\x1d\x29\xdf\xab\x13\xc1\x49\x72\x79\x7e\x56\xd7\x3b\xad\xe5\x71\x64\x97\xfc\x45\xf6\x3e\x08\x9e\x00\xe4\xcc\xe1\x6f\x33\xd4\xed\x7e\x67\x0a\x12\x0a\x88\xf4\x45\x73\xf1\x79\xe8\xbd\xd5\x44\x27\x01\x45\x42\x1d\x5e\x27\x87\x23\x52\x99\x5d\x72\x5f\xc2\xf5\x3a\x3b\x9d\x87\x34\x93\xec\x0f\xe2\xa2\x35\x53\xb0\xf3\x12\x8a\x69\x56\x57\xba\xc5\xbf\x70\x0a\x2a\x1f\x0d\x3a\xb1\x94\x36\xf4\x47\x96\xfb\x86\xf3\x3a\x99\xc9\x7f\x34\xea\x82\x95\x93\xed\x8f\xa8\xee\xf3\xd4\xeb\x40\xab\xfd\x30\xd6\x85\xb1\x6e\x53\x7f\xb0\xe9\xa4\xf8\x3a\x00\xb3\x8b\x9e\x2e\x50\x8d\x93\x7f\x51\xf5\xf1\x8e\xfc\xe2\xdc\x50\x36\x55\x3b\x55\x9d\xca\x10\x45\xa5\xc5\x7b\xe4\x4b\x50\x44\x9b\xbd\x3e\x80\x8a\x3b\x4e\x03\x77\xa1\x9e\x59\xb5\xd2\x0b\x48\x5d\xe7\x8c\x87\x66\xbd\xbb\xd0\x34\x9e\x28\x6e\x18\x08\x5f\x38\x8f\x57\x13\xd2\x9c\x8f\xfc\xf8\x79\xf1\xe3\x52\x35\xf6\xe2\x49\x58\x4b\xea\x60\x36\x1b\xa5\xef\x92\x64\x2d\xc4\xd3\x79\x0a\xaa\xc5\x40\xe7\x08\x76\x7d\x9d\x7e\x17\x1b\xfe\xfa\x2b\x0c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x60\x34\xd2\xb8\xd3\x37\x37\xb7\xd0\x2c\x68\x0b\xa7\x9f\x20\x53\x2a\x44\xd9\x2c\xba\x16\xa1\xbb\xd5\xbd\xcc\x17\x44\xdb\x1d\x28\x88\x96\x5c\xb8\x81\x4f\xef\x8d\x85\x71\x38\x4f\x70\x0f\x3f\xfd\x94\xcb\x5e\xd3\xbf\xf9\xc0\x16\x7e\xe0\xa1\xc6\x38\x13\xf9\x3f\x02\x3e\x88\x6f\xfc\xca\x91\x22\x80\xf8\x3f\x4e\xf5\xe5\x62\x53\x65\x53\x07\xef\x3a\x04\x8b\x07\xaa\x6d\x53\x8e\x23\x7a\x89\xf5\xd7\x9c\xb6\xb6\x36\x99\xb4\xaa\xda\x64\xb2\x37\x96\x4c\xe8\xff\x01\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1461452707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1461452707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1481047100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1488415706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

