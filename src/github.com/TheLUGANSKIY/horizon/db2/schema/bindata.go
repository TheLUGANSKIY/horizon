// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x6d\x6f\xe2\x48\x12\xfe\x9e\x5f\xd1\xda\x2f\x24\x12\x44\x79\x99\xcd\x24\x44\x59\x89\x49\xbc\x37\xe8\x18\xb3\x03\xe6\x66\x47\xab\x55\xab\xb1\x0b\xe8\x1b\xbb\xdb\xd3\xdd\x64\x60\x4f\xf7\xdf\x4f\x7e\x03\xdb\xb8\xfd\x02\xce\xde\xc7\xe0\xf2\xd3\xcf\x53\x55\xae\xae\x2e\x3b\xbd\xde\x59\xaf\x87\x7e\xe3\x52\x2d\x05\x4c\x3f\x8f\x90\x43\x14\x99\x13\x09\xc8\x59\x7b\xfe\x59\xaf\x77\x16\x5c\x7f\x59\x7b\x3e\x38\x68\x21\xb8\xb7\x37\x78\x05\x21\x29\x67\xe8\xe1\xf2\xee\xf2\x3a\x65\x35\xdf\x22\x7f\x89\x83\xdb\x33\x26\x37\x67\x67\x53\xc3\x42\x52\x11\x05\x1e\x30\x85\x15\xf5\x80\xaf\x15\x7a\x42\x57\x8f\xe1\x25\x97\xdb\xdf\x0e\x7f\xb5\x5d\x1a\x58\x03\xb3\xb9\x43\xd9\x12\x3d\xa1\xce\xcc\xfa\xf5\xbe\xf3\x98\xc0\x31\x87\x08\x07\xdb\x9c\x2d\xb8\xf0\x28\x5b\x62\xa9\x04\x65\x4b\x89\x9e\x10\x67\x31\xc6\x0a\xec\x6f\x78\xb1\x66\xb6\xa2\x9c\xe1\x39\x77\x28\x04\xd7\x17\xc4\x95\x90\x59\xc6\xa3\x0c\x7b\x20\x25\x59\x86\x06\x3f\x88\x60\x94\x2d\x1f\x63\xee\x40\x84\xbd\xc2\x3e\x51\x2b\xf4\x84\xfc\xf5\xdc\xa5\x76\x37\x10\x6b\x13\x45\x5c\x9e\x98\x39\xb0\x20\x6b\x57\x61\x45\xe6\x2e\x48\x9f\xd8\x10\x90\xee\xe4\xae\xfe\xa0\x6a\x85\x39\x75\x52\x3c\xce\xa2\x68\x98\xc4\x83\x3e\x5a\x72\xe1\x63\x8f\x2e\x05\x09\x38\xcb\x47\x64\x6d\x7d\xe8\x23\x6b\xf0\x61\x64\x3c\xa2\xa9\xbd\x02\x8f\xf4\x63\x12\x8f\x68\xfc\x83\x81\xe8\xa3\x5e\x18\xb1\xe7\x89\x31\xb0\x8c\xc8\x34\x8f\x83\xce\xcf\x10\x42\x88\x3a\x48\xc1\x46\x21\x73\x6c\x21\x73\x36\x1a\x75\xc3\x5f\x89\xef\xbb\x14\x1c\x4c\x14\x0a\xe2\x20\x15\xf1\x7c\x14\x10\x0d\xff\x44\x7f\x71\x06\x67\x17\x8f\x67\x59\xa2\x2b\x2a\x15\x17\x5b\x4c\x6c\x9b\xaf\x99\x92\x98\x3a\x58\xc2\xf7\x84\xf0\xd4\xf8\x3c\x33\xcc\xe7\x9a\x9c\x13\x6b\x1d\x6a\x48\x73\x6a\x0d\x26\x16\xfa\x32\xb4\x3e\xa2\xeb\xf0\x87\xa1\xf9\x3c\x31\x3e\x19\xa6\x85\x3e\x7c\x8d\x7f\x32\xc7\xe8\xd3\xd0\xfc\xd7\x60\x34\x33\x76\x7f\x0f\x7e\xdf\xff\xfd\x3c\x78\xfe\x68\xa0\xeb\x2a\x31\x47\xbb\x3d\x0f\xb4\xf7\xfb\x9c\x2e\x29\x53\xe8\xc5\xf8\x75\x30\x1b\x59\x88\xc1\x46\xbd\x12\xf7\xbc\xa3\x51\xdc\xe9\xf7\x05\x2c\x6d\x97\x48\x79\x91\x0f\x97\xe3\x08\x90\x12\xd9\x2b\x22\x88\xad\x40\xa0\x57\x22\xb6\x94\x2d\xcf\xef\xde\x5d\xe8\x03\xe5\xc0\x9c\xb6\x1d\xa6\x0c\xe6\x1b\x04\x49\xaf\xe3\xe4\x08\x45\x30\xf5\xe3\x93\x91\x5a\x12\x1d\x1e\xac\x5c\x1c\x9b\xc8\xc0\x01\x45\xa8\x2b\xd1\xbf\x25\x67\x73\x7d\xb8\x60\xb1\x00\xbb\x05\x9d\x31\x4e\x2c\x34\x97\x6d\x78\x2f\x3c\xab\x22\xb1\xe3\x3e\x44\x15\x44\x6b\xf9\x13\x17\x0e\x88\x9f\x10\x65\x0a\x96\x20\x72\x57\xd5\xd6\x07\xcd\xa5\x9a\x7e\x70\xc1\x59\x82\x38\xdd\x0f\x31\x4e\xec\x07\x09\xdf\xd7\xc0\x6c\x1d\xb7\xc8\x18\xaf\x88\x5c\x15\x87\x32\x67\xef\x0b\x78\xa5\x7c\x2d\x71\xe5\x8d\xb1\x5b\x04\x61\x92\x44\xdb\x52\x18\x88\x1d\x8f\x24\xff\xae\xf2\x69\xb5\x0b\x44\x3d\x7b\xdb\xe5\xb2\xa8\xa4\x07\x9b\xec\xae\xaa\xe7\xef\x11\x40\x54\xe5\x4d\x91\xed\xda\x77\x6a\xdb\xee\x52\x27\xfe\xd3\xf3\xb9\x50\x20\x70\xd2\x27\xe4\xb5\x5c\xe7\x93\x88\x2b\xe2\x62\x9b\x53\x26\x8b\x73\x70\x01\x80\x7d\xce\xdd\xe2\xab\x41\xdb\x82\x17\xa0\x8b\x75\x78\x59\x80\x04\xf1\xaa\x33\xf1\xc8\x06\xab\x0d\x96\xa0\xb0\xa4\x7f\xe9\xac\x7c\xc1\x15\xb7\xb9\xab\xd5\xb5\x8f\x91\x3e\xdd\xf7\x71\xf6\x89\x50\xd4\xa6\x3e\x69\x63\x3f\x2a\x86\xdd\x57\xbf\x62\x45\xf5\xab\x40\x75\x5d\x69\x2a\xb9\xdd\x8d\xaa\x74\x8d\xbf\xab\xbb\x68\x24\x14\x8d\xbf\x98\xc6\x0b\xfa\xf0\xb5\x42\xf1\x60\x64\x19\x93\x86\x82\x77\xd8\x15\xe6\x97\xd4\xa9\xd4\xd2\x62\x6e\x1e\xee\xc6\xb9\x3a\x90\xaa\x9a\x3a\x9b\xb0\x97\xb5\x23\x29\xe1\xce\x74\xe2\xc6\x14\xfd\x24\xf9\x5a\xd8\x90\x64\xb7\x66\x4b\x48\x1e\xf3\x4e\xa7\xdf\x3f\xb0\xa8\xf1\x1c\xa4\xe5\xb5\xfa\xf0\xeb\x80\xeb\x3e\xfe\x75\xfc\x7e\x4a\x01\xd0\xf1\x6b\xb7\x04\x54\xac\xf2\x77\x15\x81\x86\x62\x4f\x2c\x03\x15\xab\x1d\x16\x02\xdd\x0d\x25\xa5\x20\x75\x4b\xab\xb9\x9a\xe4\x67\x9a\x52\xed\x8e\x2c\x6e\xc4\x2a\xfa\xbc\xba\xd5\xa2\xfc\xc1\x2f\xb4\xdd\x2f\xad\x6f\x59\x88\xf6\xd1\xd3\xb5\x7b\xff\x97\x86\x4d\x6d\x30\xb0\x57\x70\xb9\x0f\x45\xe3\x03\xb5\x09\xda\xa7\xb5\xab\x34\x17\x3d\x50\x44\x73\x29\xf0\x82\xee\xb2\xa4\x4b\x46\xd4\x5a\x40\xd1\x49\xf7\xe1\xee\xe2\x8f\x3f\xf7\x15\xf7\x3f\xff\x2d\xaa\xb9\x7f\xfc\x99\xef\xe3\xc0\xe3\x38\xac\xfc\x87\xf5\x79\x87\xc5\x38\x83\xd2\x0a\xbe\xc7\x3a\x84\x89\x95\x51\x0f\xf0\x9c\xaf\x99\x23\x83\xc8\xdd\x0b\xc2\x96\x25\x23\x14\x4d\x73\x46\x9d\xe4\x69\x8a\xb9\xd5\x2a\x01\xd1\xe3\x34\x36\x47\x55\x9b\x3b\x8a\xec\x9f\xc7\xa3\xd9\x27\x33\x08\xf9\xd4\xb0\xf4\xc7\xdf\xd2\x7e\x22\x7d\x1c\x6e\x5a\xf7\xda\x93\xa9\x5d\xa1\x91\xd0\x8a\x8a\x59\x2c\xf5\x85\x28\x82\x16\x5c\xd4\x18\xe2\xa1\x97\x81\x35\xa8\x90\x38\x34\xa7\xc6\xc4\x42\x43\xd3\x1a\x1f\x0c\xf2\xc2\x8d\x66\x8a\xce\x3b\xd7\x98\x32\xaa\x28\x71\xb1\x0c\xb1\x2e\xe5\x77\xb7\xd3\x45\x9d\x9b\xab\xeb\xf7\xbd\xab\xdb\xde\xcd\x15\xba\xbe\xed\xbf\x7b\xdf\x7f\x77\x7f\xf9\x70\x77\x77\xfb\xf0\x73\xef\xea\xe7\xce\xc5\x63\x3d\xf4\x1b\x4c\x99\x03\x9b\xac\x0b\xe6\x5b\xac\x38\x75\xca\x57\x7a\xb8\x7f\x78\xdf\x64\xa5\x5b\xbc\x96\xb0\xab\x96\x98\x32\x9c\x1f\x89\x95\xae\xf7\xfe\xe6\xe6\xee\xa6\xc9\x7a\xef\x30\x71\x1c\x9c\x3f\xac\x95\xaf\x71\x7f\x7f\x7f\x1b\xaf\xa1\x09\x79\xe9\x04\xb1\x4e\xcc\x8f\x9a\xae\x06\xa9\x5c\x81\x3b\x35\x46\xc6\xb3\x95\x1a\x57\x5f\x4a\x28\x9f\x3c\x76\xd1\x75\x37\x9a\x4d\x57\xcb\x2d\x18\xc6\x1d\x2f\xb6\x74\x42\xd9\x8a\xd4\xec\x10\xaf\x89\xd0\xa2\x71\x5c\x13\xa5\x1a\xd8\xa2\xe9\x56\x0b\xb0\x35\xa6\x08\xc7\x87\xa9\xd9\x31\xb6\x8d\xb0\x95\x6f\x3e\x4d\xc2\xa8\x39\xb6\xb6\xe0\xf2\x5a\xa7\xb7\xe3\x9d\xde\xf4\xd8\xd0\x86\xdb\xab\xb6\xc2\x26\x8e\xd7\x1e\x12\x9a\xbb\x24\x5f\xd9\x73\x7f\x63\xff\x1b\x6c\x93\x25\x9e\xc7\xe6\xd4\x9a\x0c\x86\x66\xe3\xae\x22\x87\x1a\xf6\x75\x83\x97\x97\x14\x62\xe1\xc2\xe8\xb7\xc9\xf0\xd3\x60\xf2\x15\xfd\xd3\xf8\x8a\xce\xa9\xd3\xb4\xe9\xab\x48\xf9\x76\xb4\x95\x2f\x52\x24\xb5\x06\xad\xda\xca\xb5\x7d\x5a\x65\xde\xb5\xab\x5e\xb7\x4c\x99\xfe\x52\x6a\x95\x1e\x98\xef\x36\xdb\x44\xc5\xd0\x7c\x31\x7e\xaf\x77\x4e\x0e\x4d\x53\x10\x68\x6c\x16\x9f\x9a\x67\xd3\xa1\xf9\x0f\x34\x57\x02\x00\x9d\xc7\xc6\xdd\x83\x63\x69\x11\xb9\xe0\x74\x7d\x0a\xb3\xf0\x74\x5e\x8b\x56\xfe\x4c\x5f\xc4\x26\xda\x1b\x4f\xe1\x13\x21\xd4\x63\x94\x1b\x18\x74\x0f\x67\x03\x85\x09\x8d\x21\xe8\x8a\xc3\xeb\x47\x30\x9d\x99\xc3\xcf\xb3\x84\x70\x0e\x2e\x4d\x3b\x79\x89\x97\x61\x5c\x34\x9d\xef\x26\xef\xe3\x74\x64\xf7\xa7\xad\x13\x69\x52\xa7\x36\xc1\xfd\x4c\xb0\x5b\xf8\x4a\xa1\x82\x34\xf7\xb1\xdf\x16\xef\x18\x2b\x4d\x5d\x53\x88\x8f\x52\x52\x2c\x40\x6d\xda\x13\x10\x63\x69\x72\xfa\x48\x09\xd9\x01\xef\xa1\x08\xee\x07\x59\xb9\xe2\x47\x69\x88\xc9\xef\x31\x8e\x75\x7e\xb9\xa3\x77\xef\x5e\xe7\xdb\x36\x7c\x9d\x85\x4b\x53\x4e\x5e\x24\x67\x38\x16\x33\x4a\xfb\xb5\x2d\x5a\x07\x98\xf5\xca\x5b\x11\x41\x15\x85\x44\x9d\x12\xd6\x3d\xc6\xf1\x29\x59\x91\x7e\xd1\x20\xe2\xe0\xb4\xca\x19\x8e\xbf\x84\x39\xd5\xab\x95\x0b\xa4\xa5\xed\xbe\xec\xc9\x6e\xb3\x91\x61\x03\xee\xa7\x27\x43\x19\x76\x35\xe3\x4a\x47\xc7\x67\xe5\x37\xa0\x9a\x46\x4e\x13\x8d\x3f\xc9\x69\x46\x33\xde\x79\x02\x34\xb5\xf5\xe1\xe8\x4c\x2e\x45\xad\xdc\xea\x02\xa3\x0a\xa2\x71\xdd\x08\x20\x77\x1f\x67\xb4\xc4\xb6\x08\xba\xb2\x64\xed\x2c\xeb\xf3\x6e\x3b\x11\x32\xd0\xc7\xd4\x58\x3d\x5c\xee\x1b\x93\xf6\x1d\x7d\xf0\x15\x4b\x25\xfd\xdc\x0d\xf5\xc5\xa4\x3e\x2a\x7a\x33\xff\xa7\x3f\x5c\xaa\x52\x92\xb2\xad\x2f\xa2\xe8\x13\xa9\x37\x53\x53\xf8\x3d\x56\x95\xac\xa2\x9b\xea\xeb\x4b\x0e\x0e\x6f\xa6\x69\xf7\x3e\xb1\x4a\x87\xf6\x84\x97\x85\xde\x8f\xc2\xde\xe2\xd1\xce\xa3\x17\x36\x7d\x4d\x1f\xf0\x2c\x68\xb6\x6d\x68\xe9\x09\x2f\x5b\xa2\x8e\x86\x46\xbd\x4c\x6e\xb1\xf6\xb6\xaf\x43\xe0\x5a\xdc\xab\x37\xb1\x74\x83\xf9\x16\x69\x73\x88\x7f\x74\x7b\xab\x04\x71\x60\xb7\x91\x27\xa7\x6a\x3c\xe7\xfc\xdb\xd1\x5e\x2e\xc1\xac\x6c\x11\xce\xcf\x93\x0f\x8b\x7a\xbf\xfc\x82\x3a\x92\xbb\x0e\x26\x52\x82\x0a\xe3\xd3\xe9\xf7\x15\x6c\xd4\xc5\x45\x17\xe9\x0d\x6d\xee\xd4\x33\xa4\x52\xae\x41\xe8\x4d\xe7\x7c\xbd\x5c\xa9\x5a\xcb\x67\x4c\xcb\x09\x64\x4c\x73\x14\x2e\xd0\x97\x8f\xc6\xc4\x88\x92\x0c\x3d\xa1\xdb\xdb\x54\xc0\x74\xff\x88\x82\x6c\xee\xf9\x2e\x28\x08\x23\xf1\xbf\x00\x00\x00\xff\xff\x6a\x45\xd2\x27\xb5\x32\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 12981, mode: os.FileMode(438), modTime: time.Unix(1504528073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\x31\xb8\x2f\x4e\xd0\xb8\xbd\xc5\x15\x87\xab\x83\x1c\xe0\x4d\xb4\x5d\xa3\x8e\xbc\x1b\xcb\xdd\x5d\x1c\x0e\x04\x2d\x8d\x65\x36\x12\xa9\x25\xa9\xac\x7d\x45\xff\x7b\xa1\x57\xeb\x5d\x72\xd6\xce\x7d\xb4\x38\x9c\x79\x1e\xce\x70\x66\x48\x7a\x3c\x86\xbf\xf8\xcc\x95\x54\x23\xac\x82\x8b\xf1\xf8\x62\x3c\x86\x0f\x42\x69\x57\xe2\xf2\xe3\x1c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe1\x8b\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x5b\xf8\xf1\x26\x1e\xf2\x84\xfd\x54\xff\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\x6e\x61\xb4\xb2\xde\xfd\x32\xba\xc9\xd4\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x2d\x08\x9e\xea\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x1a\xdf\x50\x4f\x61\xc9\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x37\x17\x29\x3d\x93\xfa\x38\x81\xc0\x0b\x5c\xf5\xd5\xbb\x01\x6b\x1f\xe0\x04\x8c\xcf\x96\x61\x2e\x67\x0b\xf3\x06\x96\xf6\x16\x7d\x3a\x81\xf1\x0d\x2c\xbe\x71\x94\x13\x18\xc7\xcc\xef\x1e\x8d\xa9\x65\x1c\x24\x61\xf6\x0e\xcc\x85\x05\xc6\xe7\xd9\xd2\x5a\x66\x0a\xe1\xd3\xcc\x7a\x0f\xcb\xbb\xf7\xc6\xc3\x14\x02\x97\xd8\x54\x53\x4f\x44\xd6\x4b\xe6\x0f\x5a\x2a\x40\xee\x16\x0f\x0f\x86\x69\x75\xc0\x48\x04\x60\x61\xd6\x95\xc0\x6c\x09\xa3\x0f\xf3\xbf\x05\x6e\xe4\xbc\x40\x0a\x1b\x9d\x50\x52\x0f\x3c\xca\xdd\x90\xba\x38\xaa\xe2\xd8\x2a\x2d\x24\x9e\x6e\x15\x12\x7d\xe5\x45\x08\xd7\x1e\xb3\xdb\x17\xa0\x0c\xe1\x65\xfc\x53\xb3\x11\xfd\x28\x64\x41\xef\x03\x84\x8d\x90\x10\x7d\x8f\x22\x4e\xa1\x56\x20\x36\x70\xf9\x84\xfb\x6b\x78\xa6\x5e\x88\x57\x10\x50\x26\x55\xbc\x24\x71\x18\x22\x95\xf6\x96\x04\x54\x6f\xe1\x36\x45\x7d\x5d\x76\x61\x24\xe6\xe0\x86\x86\x9e\x26\x9a\xae\x3d\x54\x01\xb5\x31\x0a\xe7\x51\x65\xf4\x1b\xd3\x5b\x22\x98\x53\x88\xd0\xf2\xba\xb3\x08\xd9\x9e\x50\xdb\x16\x21\xd7\x2a\xa3\x6f\x4d\xdf\xce\x8d\x03\xf9\x74\xed\xf2\x15\xb8\x01\x2b\x37\x3b\x29\xfa\x23\x9e\x57\xd3\x0a\x97\x17\x00\x00\xcc\x81\x35\x73\x19\xd7\xb1\xa7\xcc\xd5\x7c\x7e\x1d\x7f\xa7\x8e\x23\x51\x29\xb0\xb7\x54\x52\x5b\xa3\x84\x67\x2a\xf7\x8c\xbb\x97\x3f\xff\xfd\xea\xe2\xaa\x16\x2b\xa9\x76\x07\xd7\x6c\x30\xe2\x76\x90\x89\x9a\x1e\x88\x22\x52\xd3\x0c\x30\x11\x70\x50\x53\xe6\x29\xf8\x8f\x12\x7c\xdd\x8e\x19\x37\x1b\xb4\x4f\xbd\xcc\xa9\xd2\x94\x42\x65\xf1\x49\x1b\xa5\x4c\x4e\x04\x28\x69\x9c\xcb\xda\x24\x7f\x10\xd2\x41\xf9\x03\x30\xae\xd1\x45\x59\x19\x8d\x63\xbc\x79\x68\xe0\xa2\x78\xe8\xb8\x28\x4f\xbc\x28\xa9\xd2\x74\x51\x14\x7e\x0d\x91\xdb\x6d\x40\x13\x61\xb2\xa5\x6a\xdb\xec\xe4\x8a\x7c\x20\xf1\x99\x89\x50\x91\xde\x89\xe9\x1a\x49\xca\x15\x4d\x2a\x46\xec\x95\x1c\xc7\xbd\xf1\x6e\xba\x9a\x5b\xf0\x63\x35\xe0\x72\xaf\x0c\x93\xb7\x3d\xa1\xd0\x21\x54\x43\x54\xf5\x94\xa6\x7e\x00\xd1\xe6\x8f\xea\x5f\xf4\x05\xfe\x10\x1c\xab\x73\x24\x52\xdd\x3b\x29\x91\x0d\x03\x67\xb0\x6c\x1e\x47\xe9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\xc6\xe5\x4d\x35\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\x39\x20\x37\x88\x24\x10\xc2\x6b\x1e\x8d\x1a\x05\xb2\xc1\x36\x5f\xc7\xc3\x12\x15\xca\xe7\x36\x11\x9f\xee\x88\xde\x11\x85\x9a\x28\xf6\x47\x5d\xaa\x3d\x94\x0f\x6e\x0b\xa8\xd4\xcc\x66\x01\x3d\x79\x56\x6d\xb6\x71\x48\x60\xcd\x9c\x86\x6f\xf7\xfe\x04\x72\x2c\x7f\xc2\x1c\xa2\xf0\x6b\xb6\x0c\x4b\xe3\xe3\xca\x30\xef\x06\x66\xeb\x4c\x7a\x98\x8d\x98\xc1\xd2\x9a\x3e\x5a\x49\xf1\x7f\x13\x7f\x98\x99\x77\x8f\x46\x5c\xae\xdf\x7e\x49\x3f\x99\x0b\x78\x98\x99\xff\x9e\xce\x57\x46\xfe\x7b\xfa\xf9\xf0\xfb\x6e\x7a\xf7\xde\x80\x37\x27\x21\x0a\x8b\x4f\xa6\x71\x0f\x6f\xbf\xf4\x30\x9e\xce\x2d\xe3\xf1\x48\xc2\xb9\xee\x1e\xf1\xbf\x32\xa7\x97\xcb\xb9\x02\xb5\xaf\xba\x16\xd3\x63\x6b\x93\x10\x04\x1e\xb3\x13\x5e\x71\x3d\xfa\xce\x72\x94\x7c\x52\x22\x94\x36\x66\xa1\xde\x92\xfb\xb3\x3c\x35\x1a\x4d\x26\x35\x89\x01\x9b\xa2\x48\xef\x7c\x69\xa1\xcd\x4a\xbc\xf6\x2d\x69\xa1\x69\x6e\xb3\x03\xbe\x27\x29\xb4\x21\x3b\x6d\x5a\xe8\xb1\xf2\x5a\x89\xe1\x48\xb2\xdf\x99\x1a\x7a\xac\xd5\x93\x43\xdb\x84\x8e\xf4\x50\x98\x72\xbe\x90\xcd\x52\x44\x11\xdf\xe0\x76\x2c\xed\xc2\x7a\x9a\xbc\xa1\x19\xa4\x3b\x19\x34\xca\x1e\x4c\xb7\xf7\x2b\xb4\xb5\x34\xb7\xf5\x7a\x7f\x4a\xb7\xa6\x77\x04\xf9\x33\x7a\x22\x40\xd0\xb8\xab\xa5\xea\x5d\xd4\x3b\x85\x9e\x6e\x19\xf4\x31\x3a\xf6\x36\x0e\x45\xab\xd0\x36\xac\x98\xcb\xa9\x0e\x25\x36\x9d\x02\xff\xf1\xf3\xd5\x6f\xbf\x1f\xb2\xf0\x7f\xff\xd7\x94\x87\x7f\xfb\xbd\xda\xc4\xa1\x2f\x48\x5c\x0d\xea\x39\x3b\xd7\xc5\x05\xc7\xce\xac\x7e\xd0\x55\x57\x93\x32\x63\x3e\x92\xb5\x08\xb9\xa3\x22\xcf\xfd\x22\x29\x77\x31\x4e\x86\xc5\xcd\xc4\x9c\x6c\xeb\xa4\xb6\x07\xed\xf7\x64\xbb\x2c\xcc\x79\x5f\x75\x87\x44\xfe\x6e\x31\x5f\x3d\x98\x91\x4b\x97\x86\x95\xb3\xe4\xb8\xd3\xcf\xd4\xbb\x1c\x0d\x6a\x28\x46\x93\x89\x44\xd7\xf6\xa8\x52\xb5\x8c\x7e\x32\x16\xad\xc5\xea\x28\x1e\x3d\xd9\xaf\x8b\x49\xcf\x52\x04\x4f\xb8\x3f\x5c\x05\x99\x4b\xeb\x71\x3a\x33\x3b\xd8\xd6\x13\xde\x91\x0e\x8c\x43\x69\x7a\x7f\x5f\xb0\x36\x04\x23\x7c\x78\x9c\x3d\x4c\x1f\xbf\xc0\xbf\x8c\x2f\x70\xc9\x9c\xe3\x6b\xf0\x19\x99\xb6\xd9\xec\xe2\xda\x89\xb3\x97\xed\x3a\x6f\x50\x32\x4a\x33\xf3\xde\xf8\xfc\x82\x42\x15\xcf\x2b\xe8\x83\x85\xd9\x5c\xb6\x56\xcb\x99\xf9\x4f\x58\x6b\x89\x08\x97\xa9\xf0\x75\xad\x2e\x34\x21\x8d\xca\xdb\xc9\x60\xc6\xb5\x72\x10\xc6\x6a\x85\x6d\x82\x96\x14\xd4\x93\x81\x4b\xd4\x0d\x83\x57\xa9\xe5\xd7\xf5\xb2\xdd\x18\xe3\x04\xc9\x7a\x9f\x8c\x7f\x2f\xec\x95\x39\xfb\xb8\xca\xd0\x57\x74\x17\x39\x64\xd7\x6e\x25\xf8\x4d\xc7\xec\xeb\xec\x06\xad\x0d\xf9\x21\xad\x9e\x12\x33\x73\x06\xa3\x3d\x74\xf5\xd7\x8d\x17\x05\x3d\x0c\x44\x40\x82\xb3\x90\x48\x15\x17\x79\xb4\xd4\xbf\x17\xd1\xaa\xb3\xc9\x6f\xf4\xd6\xfb\x93\x13\x2a\xeb\x2e\x72\xca\xee\x2a\x4b\x24\x9a\xe1\x15\x77\xef\x59\x30\xd6\x0c\x0c\xdb\xb6\x0d\x68\x19\x77\x70\x47\xaa\x6f\x01\x44\x70\x92\x5e\xf8\x9f\x14\x7a\xaf\xb5\x22\x8f\xfc\x61\xa2\x9c\xbd\x13\xc1\x23\x88\x9c\x78\xf9\xbb\x0c\xf5\xc3\xef\x75\x41\xf2\xd2\x71\x76\xdc\x45\x33\x45\xd4\xe9\x43\xcb\x71\x98\xd3\xb4\x15\x69\x8b\x7a\xf9\xd3\x94\xa4\x4e\x13\xbd\x49\x33\x12\xea\x41\x9d\x6e\xe8\x48\x65\x7e\x31\x7f\x0e\xe8\x4d\x76\x7a\x13\x4b\x2e\x39\x9c\xc4\x59\xe3\xa5\x64\xe7\x25\x69\xb1\x5d\x5d\xe5\xe5\xe1\xcc\x2e\xa8\x3d\x74\xf4\x72\xa9\x4c\x18\xce\xac\xf0\xee\xf4\x3a\x9e\x29\x3e\x74\xf5\xd1\x2a\xc8\x0e\x67\xd4\xf4\xa4\xf6\x3a\xd4\x1a\x1f\xf3\xfa\x38\x36\x4d\x1a\x4e\x36\xeb\x6e\x5f\x87\x60\x7e\x39\xd5\x47\xaa\xf5\xb4\x52\x56\x7d\xb8\xd7\x3f\x7b\x6e\xa8\x9a\x6a\xec\x04\x8f\xcd\x10\x65\xa5\xe5\xbb\xef\x73\xa4\x88\x2e\x7b\x43\x08\x95\x67\x1c\x47\xee\x4c\x35\xb3\x6e\x65\x10\x91\xa6\xca\x19\x37\xfa\x7a\x77\xa6\x13\x44\xaa\xb8\xa5\x89\x7d\xe1\x19\xa2\xee\x90\x76\x7f\x14\x5b\xe6\xb3\x6f\x97\xba\xb1\x17\x77\xef\x5a\x52\x07\xf3\xde\x28\x3b\xff\x92\xb5\x10\x4f\xa7\x09\xa8\x0e\x03\xbd\x2d\xd8\xe5\x65\xf6\x96\x37\xfe\xf5\x57\x18\x29\xe1\x39\x84\x2a\x85\x3a\x0e\xc5\xd1\x64\xa2\x71\xa7\xaf\xae\xae\xa1\x5d\xd0\x16\xce\x30\x41\xa6\x54\x88\xb2\x5d\x74\x2d\x42\x77\xab\x07\x99\x2f\x89\x76\x03\x28\x89\x56\x20\x5c\xc1\xa7\xf7\xc6\xa3\x91\xec\x27\xb8\x85\x9f\x7e\x2a\x78\xaf\xed\x5f\x93\x60\x0b\x3f\xf0\x50\x63\xec\x89\xe2\x1f\x2e\xef\xc5\x37\x7e\xe1\x48\x11\x40\xfc\x5f\xb2\xe6\x70\xb1\xa9\xb2\xa9\x83\x37\x3d\x82\xe5\x0d\xd5\x35\xa9\x90\x23\x06\x89\x0d\xd7\x9c\x95\xb6\x2e\x99\x2c\xaa\xba\x64\xf2\x53\x56\x2e\xf4\xff\x00\x00\x00\xff\xff\x13\xde\xdb\x61\xa7\x2a\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10919, mode: os.FileMode(438), modTime: time.Unix(1504526040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(438), modTime: time.Unix(1504086938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(438), modTime: time.Unix(1504086938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(438), modTime: time.Unix(1504086938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

